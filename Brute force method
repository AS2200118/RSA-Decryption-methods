import time

def decrypt(ciphertext, N, original_plaintext):
    # Iterate through all possible values of d
    for d in range(1, N):
        # Reconstruct the decrypted message
        decrypted_message = ''
        for c in ciphertext:
            # Compute the d-th root of c using modular exponentiation
            decrypted_message += chr(pow(c, d, N))
        # Check if the decrypted message matches the original plaintext
        if decrypted_message == original_plaintext:
            # If it does, return d
            return d

def main():
    # Define the modulus N, ciphertext, and the message which are given
    N = 161
    ciphertext = [76, 142, 76, 74]
    original_plaintext = "adam" 

    # Start the timer
    start_time = time.time()

    # Decrypt ciphertext by brute forcing d
    d = decrypt(ciphertext, N, original_plaintext)

    # End the timer
    end_time = time.time()

    # Print the result and the runtime
    print("Private exponent (d):", d)
    print("Runtime:", end_time - start_time)

if __name__ == "__main__":
    main()
